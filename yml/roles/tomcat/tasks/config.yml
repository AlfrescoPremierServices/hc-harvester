---
- name: Set process variables
  include_vars: tomcat_args.yml

- name: Check Privileges
  command: /bin/true
  become: true
  become_user: "{{tomcat_user }}"
  register: checked_privs
  ignore_errors: true

- name: Get Tomcat working dir
  stat:
    path: /proc/{{ tomcat_pid }}/cwd
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: tomcat_cwd
  become: true
  become_user: "{{ tomcat_user }}"
  when: checked_privs.failed == false

- name: Get Tomcat stdout destination
  stat:
    path: /proc/{{ tomcat_pid }}/fd/1
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: tomcat_out
  become: true
  become_user: "{{ tomcat_user }}"
  when: checked_privs.failed == false

- name: Get Tomcat stderr destination
  stat:
    path: /proc/{{ tomcat_pid }}/fd/2
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: tomcat_err
  become: true
  become_user: "{{ tomcat_user }}"
  when: checked_privs.failed == false

# Not using fetch module now as I want to be able to rename the file to the appropriate
# webapp name (which I don't have at his point).
- name:  Get Tomcat process file limits
  command: cat /proc/{{ tomcat_pid }}/limits
  register: tomcat_proc_limits 

- name: Get Tomcat process command line
  shell: cat -v /proc/{{ tomcat_pid }}/cmdline | sed 's/\^@/\n /g'
  register: tomcat_proc_cmdline

- name: Get Tomcat process Environment
  shell: cat -v /proc/{{ tomcat_pid }}/environ | sed 's/\^@/\n/g'
  register: tomcat_proc_environ
  become: true
  become_user: "{{ tomcat_user }}"
  when: checked_privs.failed == false

- name: Get Tomcat process status
  command: cat /proc/{{ tomcat_pid }}/status
  register: tomcat_proc_status

- name: Read Tomcat config file
  xml:
    path: "{{ catalina_base }}/conf/server.xml"
    xpath: /Server/Service/Connector[contains('HTTP/1.1 org.apache.coyote.http11.Http11Protocol org.apache.coyote.http11.Http11NioProtocol org.apache.coyote.http11.Http11AprProtocol', @protocol)]
    content: attribute
  register: tomcat_connector
  become: true
  become_user: "{{ tomcat_user }}"
  when: hostvars[inventory_hostname]['webapp_server_port'] is undefined or hostvars[inventory_hostname]['webapp_server_scheme'] is undefined

- name: Extract Tomcat appBase from server.xml
  xml:
    path: "{{ catalina_base }}/conf/server.xml"
    xpath: /Server/Service/Engine/Host
    content: attribute
  register: serverHost
  become: true
  become_user: "{{ tomcat_user }}"
  when: hostvars[inventory_hostname]['webapp_server_port'] is undefined or hostvars[inventory_hostname]['webapp_server_scheme'] is undefined

- set_fact:
    app_base_value: "{{ serverHost.matches[0].Host.appBase }}"

## Sometimes the appBase is a relative path, so calculating it
- name: Check is appBase is correct
  stat:
    path: "{{ app_base_value }}"
    get_attributes: no
    follow: yes
  register: app_base_value_exists
  become: "{{ 'true' if checked_privs.failed == false else 'false' }}"
  become_user: "{{ tomcat_user }}"

- set_fact:
    app_base_value: "{{ catalina_base }}/{{ app_base_value }}"
  when: not app_base_value_exists.stat.exists

- name: Check is appBase is correct
  stat:
    path: "{{ app_base_value }}"
    get_attributes: no
    follow: yes
  register: app_base_value_exists_relative
  when: not app_base_value_exists.stat.exists
  become: "{{ 'true' if checked_privs.failed == false else 'false' }}"
  become_user: "{{ tomcat_user }}"

# WARNING loop order matters as positional arguments are used later in play
- name: Check deployed Tomcat webapps
  stat: 
    path: "{{ app_base_value }}/{{ item | replace('/','#') }}"
    get_attributes: no
    follow: yes
  register: webapp_path
  ignore_errors: true
  become: "{{ 'true' if checked_privs.failed == false else 'false' }}"
  become_user: "{{ tomcat_user }}"
  loop:
    - "{{ alfresco_context }}"
    - "{{ share_context }}"
    - "{{ solr_context }}"

- name: Export Alfresco Specific variables
  set_fact:
    alfresco_port: "{% if tomcat_connector.skipped | default(false) == false and tomcat_connector.matches | length > 0 %}{{ tomcat_connector.matches[0]['Connector']['port'] }}{% else %}{{ hostvars[inventory_hostname]['webapp_server_port'] | default('8080') }}{% endif %}"
    alfresco_scheme: "{% if tomcat_connector.skipped | default(false) == false and tomcat_connector.matches | length > 0 and tomcat_connector.matches[0].Connector.SSLEnabled | default('false') == 'true' %}https{% else %}{{ hostvars[inventory_hostname]['webapp_server_scheme'] | default('http') }}{% endif %}"
    alfresco_base: "{{ catalina_base | default('/usr/share/tomcat') }}"
    alfresco_cwd: "{{ tomcat_cwd.stat.lnk_target if tomcat_cwd.skipped | default(false) == false else catalina_base }}"
    alfresco_user: "{{ tomcat_user }}"
    alfresco_shared_loader: "{% if alfresco_shared_loader is defined %}{{ alfresco_shared_loader }}{% else %}{{ catalina_base | default('/usr/share/tomcat') }}/shared/classes{% endif %}"
    alfresco_java: "{{ java_bin }}"
  when: webapp_path.results[0].stat.exists == True

- name: Export Share Specific variables
  set_fact:
    share_port: "{% if hostvars[inventory_hostname]['webapp_server_port'] is undefined %}{{ tomcat_connector.matches[0]['Connector']['port'] }}{% else %}{{ hostvars[inventory_hostname]['webapp_server_port'] | default('8080') }}{% endif %}"
    share_base: "{{ catalina_base | default('/usr/share/tomcat') }}"
    share_cwd: "{{ tomcat_cwd.stat.lnk_target if tomcat_cwd.skipped | default(false) == false else catalina_base }}"
    share_user: "{{ tomcat_user }}"
    share_shared_loader: "{% if share_shared_loader is defined %}{{ share_shared_loader }}{% else %}{{ catalina_base | default('/usr/share/tomcat') }}/shared/classes{% endif %}"
    share_java: "{{ java_bin }}"
  when: webapp_path.results[1].stat.exists == True

- name: Export Solr Specific variables
  set_fact:
    solr_port: "{% if tomcat_connector.skipped | default(false) == false and tomcat_connector.matches | length > 0 %}{{ tomcat_connector.matches[0]['Connector']['port'] }}{% else %}{{ hostvars[inventory_hostname]['webapp_server_port'] | default('8080') }}{% endif %}"
    solr_scheme: "{% if tomcat_connector.skipped | default(false) == false and tomcat_connector.matches | length > 0 and tomcat_connector.matches[0].Connector.SSLEnabled | default(false) == 'true' %}https{% else %}{{ hostvars[inventory_hostname]['webapp_server_scheme'] | default('http') }}{% endif %}"
    solr_base: "{{ catalina_base | default('/usr/share/tomcat') }}"
    solr_cwd: "{{ tomcat_cwd.stat.lnk_target if tomcat_cwd.skipped | default(false) == false else catalina_base }}"
    solr_user: "{{ tomcat_user }}"
    solr_java: "{{ java_bin }}"
  when: webapp_path.results[2].stat.exists == True

- name: Save Alfresco process variables
  connection: local
  template:
    dest: ../assets/{{ inventory_hostname }}/alfresco-{{ tomcat_pid }}.proc
    src: proc_detail
    newline_sequence: \r\n
  when: webapp_path.results[0].stat.exists == True

- name: Save Share process variables
  connection: local
  template:
    dest: ../assets/{{ inventory_hostname }}/share-{{ tomcat_pid }}.proc
    src: proc_detail
    newline_sequence: \r\n
  when: webapp_path.results[1].stat.exists == True

- name: Save Solr process variables
  connection: local
  template:
    dest: ../assets/{{ inventory_hostname }}/solr-{{ tomcat_pid }}.proc
    src: proc_detail
    newline_sequence: \r\n
  when: webapp_path.results[2].stat.exists == True

- include: catalina_log.yml
  when: catalina_base in [ alfresco_base | default(None), share_base | default(None), solr_base | default(None) ]

- include: gc_log.yml
  when: outer_loop.find('-Xloggc') != -1 and catalina_base in [ alfresco_base | default(None), share_base | default(None), solr_base | default(None) ]

