---
- name: get server info
  uri:
    url: "{{ alfresco_scheme }}://localhost:{{ alfresco_port }}/{{ alfresco_context }}/s/api/server"
    validate_certs: no
    return_content: yes
  register: srv_info

- name: Read secrets from secured location
  include_vars: secrets.yml

- name: Find Alfresco log files
  find:
    paths: "{{ hostvars[inventory_hostname]['alfresco_log_pattern'] | default(alfresco_cwd + '/placeholder' ) | dirname }}"
    patterns: "{{ hostvars[inventory_hostname]['alfresco_log_pattern'] | default('alfresco.log*') | basename }}"
    age: "{{ log_history }}"
  become: "{{ 'true' if checked_privs.failed == false else 'false' }}"
  become_user: "{{ alfresco_user }}"
  register: found_alfresco_logs

- name: Archive Alfresco log files
  archive:
    path: "{{ found_alfresco_logs.files | map(attribute='path') | list }}"
    dest: "{{ hc_tmp }}/alfresco-log.zip"
    mode: 0644
    format: zip
  become: "{{ 'true' if checked_privs.failed == false else 'false' }}"
  become_user: "{{ alfresco_user }}"
  when: found_alfresco_logs.matched > 0
  notify: Clean up Alfresco archives

- name: Archive extension directory
  archive:
    path: "{{Â alfresco_shared_loader }}/alfresco/extension"
    dest: "{{ hc_tmp }}/alfresco-extension.zip"
    mode: 0644
    format: zip
  become: "{{ 'true' if checked_privs.failed == false else 'false' }}"
  become_user: "{{ alfresco_user }}"
  register: alfext_archive
  ignore_errors: true
  notify: Clean up Alfresco archives

- name: Fetch archived extension root
  fetch:
    src: "{{ hc_tmp }}/alfresco-extension.zip"
    dest: ../assets/{{ inventory_hostname }}/conf/
    flat: yes
  when: alfext_archive.state != 'absent'

- name: Fetch archived log files
  fetch:
    src: "{{ hc_tmp }}/alfresco-log.zip"
    dest: ../assets/{{ inventory_hostname }}/logs/
    flat: yes
  when: found_alfresco_logs.matched > 0

- include: repo.yml

- include: cluster.yml

